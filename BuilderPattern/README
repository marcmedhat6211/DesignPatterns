/*
    Type: Creational Pattern
    Description: lets you construct complex objects step by step. The pattern allows you to produce different types and representations
                 of an object using the same construction code.

    SOLID Principles Analysis:
        BREAKS(Problems):
            The overall complexity of the code increases since the pattern requires creating multiple new classes.
        SUPPORTS:
            Single Responsibility Principle: You can isolate complex construction code from the business logic of the product.
            Open/Closed Principle: it is open for extension and closed for modification.
            Liskov Substitution Principle: don't force the user to implement anything they don't want to implement
            Interface Segregation Principle: it does not have inheritance so it does not break that principle.
            Dependency Inversion Principle: It all depends on interfaces.

    Examples of When to use Builder Pattern:
        Building a car from scratch.
*/