/*
    Type: Behavioral Pattern
    Description: lets you define a family of algorithms, put each of them into a separate class, and make their objects interchangeable.

    SOLID Principles Analysis:
        BREAKS(Problems):
            - If you only have a couple of algorithms and they rarely change, there’s no real reason to overcomplicate the program 
            with new classes and interfaces that come along with the pattern.
            - Clients must be aware of the differences between strategies to be able to select a proper one.
            - A lot of modern programming languages have functional type support that lets you implement different versions of an 
              algorithm inside a set of anonymous functions. Then you could use these functions exactly as you’d have used the 
              strategy objects, but without bloating your code with extra classes and interfaces.
        SUPPORTS:
            Single Responsibility Principle: Every class does one thing.
            Open/Closed Principle: You can introduce new strategies without having to change the context.
            Liskov Substitution Principle: You replace Inheritence by Composition.
            Interface Segregation Principle: No one is implementing anything that they don't need.
            Dependency Inversion Principle: It all depends on Interfaces.

    Examples of When to use the Strategy Pattern:
        - When you have many ways of discounts.
        - When you have many ways of paying a bill(Credit card, paypal, Debit, etc...).
*/