/*
    Type: Behavioral Pattern.
    Description: Defines an algorithm in the superclass but lets subclasses override specific steps of the algorithm without changing its structure

    SOLID Principles Analysis:
        BREAKS:
            Liskov Substitution: suppressing a default step implementation via a subclass.
            Single Responsibility Principle: as the steps are all different things to do in one class.
            Some clients may be limited by the provided skeleton of an algorithm.
            Template methods tend to be harder to maintain the more steps they have.

        SUPPORTS:
            Open - Closed Principle: Open for extraction as you can inherit from the abstract class as you want and closed for modification.
            Interface Segregation Principle: clients are not obliged to excecute certain methods but on the contrary they override the ones they need.
            Dependency Inversion Principle: As the pattern is using an Abstract class.

    Examples Where you can use the Template Pattern:
        The Pasta
        There is White pasta and Red Pasta
        so you do all the steps to prepare the pasta but you only overrides the add sauce method where you can put your favorite sauce.
*/